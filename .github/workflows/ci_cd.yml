name: CerifyNow CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  django_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python manage.py test

  deploy_django:
    runs-on: ubuntu-latest
    needs: django_ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Django via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e  # Stop script on first error

            cd /home/ubuntu
            REPO_DIR="CerifyNow"

            # Clone or reset repository
            if [ ! -d "$REPO_DIR" ]; then
              echo "Cloning repository..."
              git clone https://github.com/CerifyNow/CerifyNow-API-v1.git $REPO_DIR
            else
              echo "Resetting local changes and pulling latest from main..."
              cd $REPO_DIR
              git reset --hard
              git clean -fd
              git pull origin main
              cd ..
            fi

            # Navigate into the project
            cd $REPO_DIR

            # Create virtual environment if missing
            if [ ! -d "venv" ]; then
              echo "Creating virtual environment..."
              python3 -m venv venv
            fi

            # Activate virtual environment
            source venv/bin/activate

            # Install requirements
            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            # Run migrations (makemigrations is not needed on production)
            echo "Running migrations..."
            python manage.py migrate --noinput

            # Collect static files
            echo "Collecting static files..."
            python manage.py collectstatic --noinput

            # Restart the Django service
            echo "Restarting Django service..."
            sudo systemctl daemon-reload
            sudo systemctl restart cerifynow.service

            echo "âœ… Deployment complete!"
