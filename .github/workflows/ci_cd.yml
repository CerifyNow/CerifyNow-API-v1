name: CerifyNow CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  django_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.12 ]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        run: |
          python manage.py test

  deploy_django:
    runs-on: ubuntu-latest
    needs: django_ci
    # Faqat main branch ga push bo'lganda deploy qil
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e

            cd /home/ubuntu
            REPO_DIR="CerifyNow"

            if [ ! -d "$REPO_DIR" ]; then
              echo "üì¶ Cloning repository..."
              git clone https://github.com/CerifyNow/CerifyNow-API-v1.git $REPO_DIR
            else
              echo "üîÑ Pulling latest changes..."
              cd $REPO_DIR
              
              # ASOSIY TUZATISH: Log fayllar muammosini hal qilish
              echo "üíæ Stashing local changes..."
              git stash push -m "Auto stash before deployment $(date)"
              
              echo "‚¨áÔ∏è Fetching and pulling..."
              git fetch origin
              git pull origin main
              
              cd ..
            fi

            cd /home/ubuntu/$REPO_DIR

            # Log papkalarini yaratish (agar yo'q bo'lsa)
            echo "üìÅ Ensuring log directories exist..."
            mkdir -p logs

            echo "üêç Creating virtual environment..."
            python3 -m venv venv || python -m venv venv || { echo "‚ùå Venv yaratib bo'lmadi"; exit 1; }
            
            echo "‚öôÔ∏è Activating virtual environment..."
            source venv/bin/activate

            echo "üì¶ Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "üß¨ Running migrations..."
            python manage.py migrate --noinput

            echo "üé® Collecting static files..."
            python manage.py collectstatic --noinput

            # Service status check va restart
            echo "üöÄ Restarting Django service..."
            if sudo systemctl is-active --quiet cerifynow.service; then
              echo "Service is running, restarting..."
            else
              echo "Service is not running, starting..."
            fi
            
            sudo systemctl daemon-reload
            sudo systemctl restart cerifynow.service
            
            # Service statusini tekshirish
            if sudo systemctl is-active --quiet cerifynow.service; then
              echo "‚úÖ Service successfully restarted!"
            else
              echo "‚ùå Service restart failed!"
              sudo systemctl status cerifynow.service
              exit 1
            fi

            echo "‚úÖ Deployment complete!"